generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum RuleType {
  FACT
  CONSTRAINT
  COMPUTATION
}

enum Mutability {
  DYNAMIC
  STATIC
}

enum ReferenceType {
  FLOW
  STEP
  CONDITION
  BUSINESSRULE
}

enum Priority {
  LOW
  NORMAL
  HIGH
}

enum FlowType {
  NORMAL
  ALTERNATE
  EXCEPTION
}

enum ConditionType {
  PRECONDITION
  POSTCONDITION
}

enum ProjectCounterType {
  BUSINESSRULE
  USECASE
}

enum UseCaseCounterType {
  ALTERNATEFLOW
  EXCEPTIONFLOW
  PRECONDITION
  POSTCONDITION
}

model User {
  id       Int       @id @default(autoincrement())
  username String    @unique
  password String
  projects Project[]
  role     Role      @default(USER)
  useCases UseCase[]
}

model ProjectSequence {
  id         Int                @id @default(autoincrement())
  projectId  Int
  project    Project            @relation(fields: [projectId], references: [id])
  entityType ProjectCounterType
  count      Int

  @@unique([projectId, entityType])
}

model Project {
  id               Int               @id @default(autoincrement())
  slug             String
  name             String
  description      String?
  ownerId          Int
  owner            User              @relation(fields: [ownerId], references: [id])
  useCases         UseCase[]
  actors           Actor[]
  businessRules    BusinessRule[]
  projectSequences ProjectSequence[]
}

model Actor {
  id                Int       @id @default(autoincrement())
  name              String
  description       String?
  projectId         Int
  project           Project   @relation(fields: [projectId], references: [id])
  useCasesPrimary   UseCase[] @relation("PrimaryActor")
  useCasesSecondary UseCase[] @relation("UseCaseSecondaryActors")
}

model UseCaseSequence {
  id         Int                @id @default(autoincrement())
  useCaseId  Int
  useCase    UseCase            @relation(fields: [useCaseId], references: [id])
  entityType UseCaseCounterType
  count      Int

  @@unique([useCaseId, entityType])
}

model UseCase {
  id               Int               @id @default(autoincrement())
  publicId         String
  slug             String
  projectId        Int
  project          Project           @relation(fields: [projectId], references: [id])
  name             String
  creatorId        Int
  creator          User              @relation(fields: [creatorId], references: [id])
  dateCreated      DateTime          @default(now())
  dateModified     DateTime          @updatedAt
  primaryActorId   Int
  primaryActor     Actor             @relation("PrimaryActor", fields: [primaryActorId], references: [id])
  secondaryActors  Actor[]           @relation("UseCaseSecondaryActors")
  description      String
  trigger          String
  conditions       Condition[]
  flows            Flow[]
  useCaseSequences UseCaseSequence[]
  priority         Priority          @default(NORMAL)
  freqUse          String
  businessRules    BusinessRule[]
  otherInfo        String[]
  assumptions      String[]

  @@unique([projectId, publicId])
}

model Condition {
  id            Int           @id @default(autoincrement())
  publicId      String
  description   String
  conditionType ConditionType
  useCaseId     Int
  useCases      UseCase       @relation(fields: [useCaseId], references: [id])

  @@unique([useCaseId, publicId])
}

model BusinessRule {
  id         Int        @id @default(autoincrement())
  publicId   String
  ruleDef    String
  type       RuleType
  mutability Mutability
  source     String
  useCases   UseCase[]
  projectId  Int
  project    Project    @relation(fields: [projectId], references: [id])

  @@unique([projectId, publicId])
}

model Flow {
  id        Int      @id @default(autoincrement())
  publicId  String
  name      String
  flowType  FlowType
  forFlowId Int?
  useCaseId Int
  useCase   UseCase  @relation(fields: [useCaseId], references: [id])
  steps     Step[]
  stepCount Int      @default(0)

  @@unique([useCaseId, publicId])
}

model Step {
  id       Int         @id @default(autoincrement())
  publicId String
  step     String
  flowId   Int
  flow     Flow        @relation(fields: [flowId], references: [id])
  refs     Reference[]

  @@unique([flowId, publicId])
}

model Reference {
  id       Int           @id @default(autoincrement())
  refType  ReferenceType
  refId    Int
  location Int
  stepId   Int
  step     Step          @relation(fields: [stepId], references: [id])
}

//TODO: Add versioning (history tables and look into triggers)
